{"version":3,"sources":["Cell.js","Game.js","App.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","isMoore","iterationNumber","Game","state","cells","isRunning","interval","runGame","setState","nextIteration","stopGame","timeoutHandler","window","clearTimeout","actionClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","updateCellsList","actionChangeInterval","target","value","actionClearButton","makeTheBoardEmpty","actionModeButton","actionRandomButton","random","HEIGHT","WIDTH","rect","boardRef","getBoundingClientRect","doc","document","documentElement","clientLeft","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","backgroundSize","onClick","ref","n","map","cell","id","onChange","type","disabled","App","class","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ccc236d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/**\r\n* ! it has to match CELL_SIZE param in the Game.js\r\n*/\r\nconst CELL_SIZE = 20;\r\n\r\nclass Cell extends React.Component {\r\n\r\n    /**\r\n     * ! React's render() method, must have\r\n     *\r\n     * @return {*} \r\n     */\r\n    render() {\r\n        const { x, y } = this.props;\r\n        return (\r\n            <div className=\"Cell\" style={{\r\n                left: `${CELL_SIZE * x + 1}px`,\r\n                top: `${CELL_SIZE * y + 1}px`,\r\n                width: `${CELL_SIZE - 1}px`,\r\n                height: `${CELL_SIZE - 1}px`,\r\n            }} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\nimport './css/Game.css';\r\nimport './css/Cell.css';\r\n\r\nconst CELL_SIZE = 20;\r\nconst WIDTH = 1080;\r\nconst HEIGHT = 680;\r\nlet isMoore = true;\r\nlet iterationNumber = 0;\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.rows = HEIGHT / CELL_SIZE;\r\n        this.cols = WIDTH / CELL_SIZE;\r\n        this.board = this.makeTheBoardEmpty();\r\n    }\r\n\r\n\r\n    /**\r\n     * ! Gamestate, very important thing\r\n     *\r\n     */\r\n    state = {\r\n        cells: [],\r\n        isRunning: false,\r\n        interval: 250,\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates current element offset from the top-left corner of viewpage\r\n     *\r\n     * @return {*} \r\n     */\r\n    getElementOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n        return {\r\n\r\n            /*\r\n            ! broken, it keeps absolute size, we need NOT to add window.pageXOffset or window.scrollX etc.~\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop, */\r\n            \r\n            x: (rect.left) - doc.clientLeft,\r\n            y: (rect.top) - doc.clientTop,\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Populate cell list with entire board of dead or alive cells (so it's basically flattened gameboard)\r\n     *\r\n     * @return {*} \r\n     */\r\n    updateCellsList() {\r\n        let cells = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                if (this.board[y][x]) {\r\n                    cells.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    /**\r\n     * Make an entire gameboard 'dead' (basically kill every single alive cell and leave the gameboard 'empty')\r\n     *\r\n     * @return {*} \r\n     */\r\n    makeTheBoardEmpty() {\r\n        let board = [];\r\n        for (let y = 0; y < this.rows; y++) {\r\n            board[y] = [];\r\n            for (let x = 0; x < this.cols; x++) {\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n    /**\r\n     * Runs the next iteration of the Game with set interval: calculate neighbors count for every single cell and determine if this cell is dead or alive in the next iteration\r\n     *\r\n     */\r\n    nextIteration() {\r\n        let newBoard = this.makeTheBoardEmpty();\r\n        iterationNumber++;\r\n\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                let neighbors = this.calculateNeighbors(this.board, x, y);\r\n                if (this.board[y][x]) {\r\n                    if (neighbors === 2 || neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    } else {\r\n                        newBoard[y][x] = false;\r\n                    }\r\n                } else {\r\n                    if (!this.board[y][x] && neighbors === 3) {\r\n                        newBoard[y][x] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newBoard;\r\n        this.setState({ cells: this.updateCellsList() });\r\n\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.nextIteration();\r\n        }, this.state.interval);\r\n    }\r\n\r\n    /**\r\n     * Starts the game and run next iteration\r\n     *\r\n     */\r\n    runGame = () => {\r\n        this.setState({ isRunning: true });\r\n        this.nextIteration();\r\n    }\r\n\r\n    /**\r\n     * Stops the game and change the gamestate\r\n     *\r\n     */\r\n    stopGame = () => {\r\n        this.setState({ isRunning: false });\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate number of neighbours at point x,y on the board (for one explicit cell)\r\n     *\r\n     * @param {*} board\r\n     * @param {*} x\r\n     * @param {*} y\r\n     * @return {*} \r\n     */\r\n    calculateNeighbors(board, x, y) {\r\n        let neighbors = 0;\r\n        let dirs = [[]];\r\n        if (isMoore) {\r\n            dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        } else if (!isMoore) {\r\n            dirs = [[-1, 0], [0, -1], [1, 0], [0, 1]];\r\n        }\r\n        for (let i = 0; i < dirs.length; i++) {\r\n            const dir = dirs[i];\r\n            let y1 = y + dir[0];\r\n            let x1 = x + dir[1];\r\n\r\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n                neighbors++;\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    }\r\n    \r\n    /**\r\n     *  Determine if user clicked on the specific cell on gameboard. Change the state (dead/alive) of clicked cell. Do nothing if clicked outside the board\r\n     *\r\n     * @param {*} event\r\n     */\r\n     actionClick = (event) => {\r\n\r\n        const elemOffset = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffset.x;\r\n        const offsetY = event.clientY - elemOffset.y;\r\n\r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY / CELL_SIZE);\r\n\r\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n\r\n        this.setState({ cells: this.updateCellsList() });\r\n    }\r\n\r\n    /**\r\n     * Determine if user changed the interval value and update it in the gamestate\r\n     *\r\n     * @param {*} event\r\n     */\r\n    actionChangeInterval = (event) => {\r\n        this.setState({ interval: event.target.value });\r\n    }\r\n\r\n    /**\r\n     * Determine if user clicked on the 'Clear' button and handle this action\r\n     *\r\n     */\r\n    actionClearButton = () => {\r\n        iterationNumber = 0;\r\n        this.board = this.makeTheBoardEmpty();\r\n        this.setState({ cells: this.updateCellsList() });\r\n    }\r\n\r\n    /**\r\n     * Determine if user change the neighborhood mode (Moore/von Neumann) and handle this action\r\n     *\r\n     */\r\n    actionModeButton = () => {\r\n        this.stopGame();\r\n        isMoore = !isMoore;\r\n    }\r\n\r\n    /**\r\n     * Randomizes entire gameboard with alive/dead cells with desired (default: 0.6) random ratio\r\n     *\r\n     */\r\n    actionRandomButton = () => {\r\n        for (let y = 0; y < this.rows; y++) {\r\n            for (let x = 0; x < this.cols; x++) {\r\n                this.board[y][x] = (Math.random() >= 0.6);\r\n            }\r\n        }\r\n\r\n        this.setState({ cells: this.updateCellsList() });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ! React's render() method, must have\r\n     *\r\n     * @return {*} \r\n     */\r\n    render() {\r\n        const { cells, interval, isRunning } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"Board\"\r\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px` }}\r\n                    onClick={this.actionClick}\r\n                    ref={(n) => { this.boardRef = n; }}>\r\n\r\n                    {cells.map(cell => (\r\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`} />\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"controls\">\r\n                    Step interval: <input id=\"interval\" value={this.state.interval} onChange={this.actionChangeInterval} /> ms, iterations: <input id=\"iterations\" value={iterationNumber} type=\"text\" disabled />  <p />\r\n                    {isRunning ?\r\n                        <button className=\"button\" id=\"btnStop\" onClick={this.stopGame}>Stop</button> :\r\n                        <button className=\"button\" id=\"btnRun\" onClick={this.runGame}>Run</button>\r\n                    }\r\n\r\n                    {isMoore ?\r\n                        <button className=\"button\" onClick={this.actionModeButton}>Moore</button> :\r\n                        <button className=\"button\" onClick={this.actionModeButton}>Neumann</button>\r\n                    }\r\n\r\n                    <button className=\"button\" onClick={this.actionRandomButton}>Random</button>\r\n                    <button className=\"button\" id=\"btnClear\" onClick={this.actionClearButton}>Clear</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Game;","import './css/App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div>\n      <div class='title'>\n        <h1>\n          <a href=\"https://en.wikipedia.org/wiki/John_Horton_Conway\" target=\"_blank\">&#8625; John H. Conway</a>'s <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Game of Life</a> in React\n        </h1>\n      </div>\n\n\n      <Game />\n\n\n      <div class='author'>\n        Karol 'z0miren' Warchałowski\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react_root')\n);"],"sourceRoot":""}